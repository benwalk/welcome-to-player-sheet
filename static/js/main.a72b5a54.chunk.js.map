{"version":3,"sources":["styles/style.js","styles/app.style.js","assets/sheet-map.js","components/App.js","index.js"],"names":["link","normal","borderBottom","hover","color","active","touchActive","focusFromTab","outline","outlineOffset","touchActiveTapOnly","childLink","Object","keys","forEach","key","slice","toUpperCase","p","margin","lineHeight","s","create","style","root","fontFamily","fontWeight","fontSize","letterSpacing","position","left","WebkitTransform","MozTransform","msTransform","OTransform","transform","WebkitTextSizeAdjust","MozTextSizeAdjust","msTextSizeAdjust","textSizeAdjust","name","areas","shape","coords","href","App","src","map","fillColor","width","height","ReactDOM","render","document","getElementById"],"mappings":"gPAGMA,G,MAAO,CACXC,OAAQ,CACNC,aAAc,6BAEhBC,MAAO,CACLD,aAAc,2BACdE,MAAO,SAETC,OAAQ,QACRC,YAAa,CACXJ,aAAc,4BACdE,MAAO,SAETG,aAAc,CACZC,QAAS,2BACTC,cAAe,MACfL,MAAO,SAETM,oBAAoB,IAGhBC,EAAY,GAClBC,OAAOC,KAAKb,GAAMc,SAAQ,SAACC,GACb,uBAARA,IACFJ,EAAU,WAAD,OAAYI,EAAIC,MAAM,EAAG,GAAGC,eAA5B,OAA4CF,EAAIC,MAAM,KAAQhB,EAAKe,OAIjE,OACbf,OACAW,YACAO,EAAG,CACDC,OAAQ,QACRC,WAAY,QClCVC,EAAIT,OAAOU,OAAOC,GAExBF,EAAEG,KAAO,CACPC,WAAY,wBACZC,WAAY,MACZC,SAAU,OACVC,cAAe,UAWfC,SAAU,WACVC,KAAM,OACNC,gBAAiB,qBACjBC,aAAc,qBACdC,YAAa,qBACbC,WAAY,qBACZC,UAAW,qBAEXC,qBAAsB,OACtBC,kBAAmB,OACnBC,iBAAkB,OAClBC,eAAgB,QAGHlB,QCjCA,GAEbmB,KAAM,QAGNC,MAAO,CAEL,CAIEC,MAAO,OAKPC,OAAQ,CAEN,GACA,IACA,IACA,KAIFC,KAAM,MClBG,SAASC,IACtB,OACE,yBAAKtB,MAAOF,EAAEG,MACZ,kBAAC,IAAD,CACEsB,IANM,uBAONC,IAAKA,EACLC,UAAW,UACXC,MAAO,KACPC,OAAQ,QCVhBC,IAASC,OACP,kBAAC,IAAD,KACE,kBAACP,EAAD,OAEFQ,SAASC,eAAe,W","file":"static/js/main.a72b5a54.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst link = {\n  normal: {\n    borderBottom: '1px dotted rgb(0, 168, 0)',\n  },\n  hover: {\n    borderBottom: '1px solid rgb(0, 168, 0)',\n    color: 'black',\n  },\n  active: 'hover',\n  touchActive: {\n    borderBottom: '1px dashed rgb(0, 168, 0)',\n    color: 'black',\n  },\n  focusFromTab: {\n    outline: '2px solid rgb(0, 152, 0)',\n    outlineOffset: '2px',\n    color: 'black',\n  },\n  touchActiveTapOnly: true,\n};\n\nconst childLink = {};\nObject.keys(link).forEach((key) => {\n  if (key !== 'touchActiveTapOnly') {\n    childLink[`onParent${key.slice(0, 1).toUpperCase()}${key.slice(1)}`] = link[key];\n  }\n});\n\nexport default {\n  link,\n  childLink,\n  p: {\n    margin: '3vh 0',\n    lineHeight: '1.4',\n  },\n};\n\nexport const Code = ({ children }) => (\n  <code\n    style={{\n      fontFamily: 'monospace',\n      fontSize: '15px',\n      paddingLeft: '2px',\n    }}\n  >{children}</code>\n);\n\nCode.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n\nexport const Li = ({ children, ...rest }) => (\n  <li\n    style={{\n      paddingLeft: '18px',\n      textIndent: '-15px',\n      margin: '0.5vh 0',\n      listStyle: 'none',\n    }}\n    {...rest}\n  >\n    <span style={{ paddingRight: '7px' }}>&ndash;</span>\n    {children}\n  </li>\n);\n\nLi.propTypes = {\n  children: PropTypes.string.isRequired,\n};\n","import style from './style';\n\nconst s = Object.create(style);\n\ns.root = {\n  fontFamily: 'helvetica, sans-serif',\n  fontWeight: '300',\n  fontSize: '16px',\n  letterSpacing: '0.025em',\n  // padding: '3vh 0 12vh 0',\n  // width: '500px',\n  // use responsive max-width to simulate padding/margin to allow\n  // space for vertical scroll bar without creating horizontal scroll bar\n  // (if there is padding, the window will scroll horizontally to show the padding)\n  // maxWidth: 'calc(100vw - 40px)',\n\n  // center based on vw to prevent content jump when vertical scroll bar show/hide\n  // note: vw/vh include the width of scroll bars. Note that centering using margin auto\n  // or % (which doesn't include scroll bars, so changes when scroll bars shown) causes a page jump\n  position: 'relative',\n  left: '50vw',\n  WebkitTransform: 'translate(-50%, 0)',\n  MozTransform: 'translate(-50%, 0)',\n  msTransform: 'translate(-50%, 0)',\n  OTransform: 'translate(-50%, 0)',\n  transform: 'translate(-50%, 0)',\n\n  WebkitTextSizeAdjust: 'none',\n  MozTextSizeAdjust: 'none',\n  msTextSizeAdjust: 'none',\n  textSizeAdjust: 'none',\n};\n\nexport default s;\n","export default {\n  // name of the map, used to bind the image\n  name: 'sheet',\n\n  // Array of area objects\n  areas: [\n    // area object\n    {\n      // Uniquely identify an area. Index in array is used if this value is not provided.\n      // _id: '', // string\n      // Either rect, circle or poly\n      shape: 'rect', // string\n      // Coordinates delimiting the zone according to the specified shape:\n      // - rect: top-left-X,top-left-Y,bottom-right-X,bottom-right-Y\n      // - circle: center-X,center-Y,radius\n      // - poly: Every point in the polygon path as point-X,point-Y,...\n      coords: [\n        // array of number\n        50,\n        100,\n        150,\n        200,\n      ],\n      // Target link for a click in the zone (note that if you provide a\n      // onClick prop, href will be prevented)\n      href: '', // string\n    },\n  ],\n};\n","import React from 'react';\nimport ImageMapper from 'react-image-mapper';\nimport s from '../styles/app.style';\nimport map from '../assets/sheet-map';\n\nconst sheet = 'src/assets/sheet.png';\n\nexport default function App() {\n  return (\n    <div style={s.root}>\n      <ImageMapper\n        src={sheet}\n        map={map}\n        fillColor={'#B4E3DE'}\n        width={1157}\n        height={1157}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}